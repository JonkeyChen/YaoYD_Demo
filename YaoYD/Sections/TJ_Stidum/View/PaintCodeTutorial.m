//
//  PaintCodeTutorial.m
//  PaintCodeTutorial
//
//  Created by JonkeyChen on 16/4/5.
//  Copyright (c) 2016 CompanyName. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "PaintCodeTutorial.h"


@implementation PaintCodeTutorial

#pragma mark Cache

static UIColor* _color = nil;

static UIImage* _imageOfStopwatch = nil;

#pragma mark Initialization

+ (void)initialize
{
    // Colors Initialization
    _color = [UIColor colorWithRed: 0.067 green: 0.553 blue: 0.855 alpha: 1];

}

#pragma mark Colors

+ (UIColor*)color { return _color; }

#pragma mark Drawing Methods

+ (void)drawStopwatch
{
    
    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(15, 30, 220, 220)];
    [PaintCodeTutorial.color setFill];
    [ovalPath fill];
    
    
    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(114, 2, 22, 34)];
    [PaintCodeTutorial.color setFill];
    [rectanglePath fill];
    
    
    //// Bezier Drawing
    UIBezierPath* bezierPath = UIBezierPath.bezierPath;
    [bezierPath moveToPoint: CGPointMake(214.14, 30)];
    [bezierPath addLineToPoint: CGPointMake(235.36, 51.21)];
    [bezierPath addLineToPoint: CGPointMake(221.21, 65.35)];
    [bezierPath addCurveToPoint: CGPointMake(215, 59.14) controlPoint1: CGPointMake(221.21, 65.35) controlPoint2: CGPointMake(218.49, 62.63)];
    [bezierPath addCurveToPoint: CGPointMake(215, 59.35) controlPoint1: CGPointMake(215, 59.28) controlPoint2: CGPointMake(215, 59.35)];
    [bezierPath addLineToPoint: CGPointMake(205, 59.35)];
    [bezierPath addLineToPoint: CGPointMake(205, 49.35)];
    [bezierPath addLineToPoint: CGPointMake(205.21, 49.35)];
    [bezierPath addCurveToPoint: CGPointMake(200, 44.14) controlPoint1: CGPointMake(202.21, 46.36) controlPoint2: CGPointMake(200, 44.14)];
    [bezierPath addLineToPoint: CGPointMake(214.14, 30)];
    [bezierPath closePath];
    [PaintCodeTutorial.color setFill];
    [bezierPath fill];
}

+ (void)drawCanvas1
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    //// Bezier 2 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 100, 100);
    
    UIBezierPath* bezier2Path = UIBezierPath.bezierPath;
    [bezier2Path moveToPoint: CGPointMake(4.15, -87.26)];
    [bezier2Path addCurveToPoint: CGPointMake(4.15, -13.72) controlPoint1: CGPointMake(4.15, -87.26) controlPoint2: CGPointMake(4.15, -46.67)];
    [bezier2Path addCurveToPoint: CGPointMake(15.15, 0.74) controlPoint1: CGPointMake(10.5, -11.97) controlPoint2: CGPointMake(15.15, -6.16)];
    [bezier2Path addCurveToPoint: CGPointMake(4.15, 15.2) controlPoint1: CGPointMake(15.15, 7.64) controlPoint2: CGPointMake(10.5, 13.45)];
    [bezier2Path addCurveToPoint: CGPointMake(4.15, 27.74) controlPoint1: CGPointMake(4.15, 22.89) controlPoint2: CGPointMake(4.15, 27.74)];
    [bezier2Path addLineToPoint: CGPointMake(-3.85, 27.74)];
    [bezier2Path addCurveToPoint: CGPointMake(-3.85, 15.2) controlPoint1: CGPointMake(-3.85, 27.74) controlPoint2: CGPointMake(-3.85, 22.89)];
    [bezier2Path addCurveToPoint: CGPointMake(-14.85, 0.74) controlPoint1: CGPointMake(-10.19, 13.45) controlPoint2: CGPointMake(-14.85, 7.64)];
    [bezier2Path addCurveToPoint: CGPointMake(-3.85, -13.72) controlPoint1: CGPointMake(-14.85, -6.16) controlPoint2: CGPointMake(-10.19, -11.97)];
    [bezier2Path addCurveToPoint: CGPointMake(-3.85, -87.26) controlPoint1: CGPointMake(-3.85, -46.67) controlPoint2: CGPointMake(-3.85, -87.26)];
    [bezier2Path addLineToPoint: CGPointMake(4.15, -87.26)];
    [bezier2Path addLineToPoint: CGPointMake(4.15, -87.26)];
    [bezier2Path closePath];
    [UIColor.whiteColor setFill];
    [bezier2Path fill];
    
    CGContextRestoreGState(context);
}

#pragma mark Generated Images

+ (UIImage*)imageOfStopwatch
{
    if (_imageOfStopwatch)
        return _imageOfStopwatch;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(250, 250), NO, 0.0f);
    [PaintCodeTutorial drawStopwatch];

    _imageOfStopwatch = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfStopwatch;
}

#pragma mark Customization Infrastructure

- (void)setStopwatchTargets: (NSArray*)stopwatchTargets
{
    _stopwatchTargets = stopwatchTargets;

    for (id target in self.stopwatchTargets)
        [target setImage: PaintCodeTutorial.imageOfStopwatch];
}


@end
